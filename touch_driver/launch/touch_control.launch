<?xml version="1.0"?>
<launch>

  <!-- GDB functionality -->
  <arg name="debug" default="false" doc="If set to true, will start the driver inside gdb" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="controller_config_file" default="$(find touch_driver)/config/touch_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller effort_joint_traj_controller"/>
  <arg name="stopped_controllers" default=""/>
  <arg name="tf_prefix" default="Touch" doc="tf_prefix used for the Touch."/>
  <arg name="publish_rate" default="500" doc="tf_prefix used for the Touch."/>
  <arg name="root_name" default="base" doc="tf_prefix used for the Touch."/>
  <arg name="tip_name" default="end_effector" doc="tf_prefix used for the Touch."/>


  
  <!-- Load touch URDF -->
  <include file="$(find touch_description)/launch/load_touch.launch" >
	</include>
 
  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
    <!-- <remap from="joint_states" to="Touch/joint_states" /> -->
  </node>

  <!-- <include file="$(find touch_moveit_config)/launch/move_group.launch" >
	</include> -->

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find touch_teleoperation)/cfg/touch_state.rviz" />

  <!-- Load hardware interface -->
  <node name="touch_hardware_interface" pkg="touch_driver" type="touch_driver_node" output="screen" launch-prefix="$(arg launch_prefix)" required="true">
    <param name="tf_prefix" value="$(arg tf_prefix)" />
    <param name="publish_rate" value="$(arg publish_rate)" />
    <param name="root_name" value="$(arg root_name)" />
    <param name="tip_name" value="$(arg tip_name)" />
    <!-- <remap from="joint_states" to="$(arg tf_prefix)/joint_states" /> -->
  </node>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg controllers)" >
  </node>

  <!-- load other controller -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="stopped $(arg stopped_controllers)" unless="$(eval arg('stopped_controllers') == '')"/>

</launch>
